# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: CI/CD for On-premise Webservice

# 워크플로우가 시작될 조건을 지정합니다.
on:
  # 'main' 브랜치에 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main" ]

# 워크플로우에서 실행될 작업(job)들을 정의합니다.
jobs:
  # 1. CI: Docker 이미지를 빌드하고 Docker Hub에 푸시하는 작업
  build-and-push:
    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest
    steps:
      # 1-1. 소스 코드 체크아웃
      # GitHub Repository에 있는 코드를 가상 환경으로 가져옵니다.
      - name: Checkout source code
        uses: actions/checkout@v4

      # 1-2. Docker Hub 로그인
      # GitHub Secrets에 저장된 Docker Hub 계정 정보를 사용하여 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 1-3. Docker 이미지 빌드 및 푸시
      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시합니다.
      # 이미지 태그는 고유성을 위해 Git 커밋 해시(SHA)의 앞 7자리를 사용합니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/onpremise-webservice:${{ github.sha }}

  # 2. CD: 운영 서버에 접속하여 최신 버전으로 배포하는 작업
  deploy:
    # 'build-and-push' 작업이 성공적으로 완료되어야 이 작업이 실행됩니다.
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # 2-1. AWS 자격 증명 설정 (Configure AWS credentials)
      # GitHub Secrets에 저장된 AWS IAM User의 Access Key를 사용하여 인증합니다.
      # 이 IAM User는 SSM 명령을 실행할 권한이 있어야 합니다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2-2. AWS SSM을 통해 원격 서버에 배포 스크립트 실행 (Deploy to server via AWS SSM)
      # SSH 포트를 열지 않고 안전하게 명령을 실행합니다.
      - name: Deploy to server via AWS SSM
        uses: aws-actions/aws-ssm-send-command@v1
        with:
          instance-ids: ${{ secrets.AWS_INSTANCE_ID }}
          # working-directory는 SSM Agent v3.0 이상부터 지원됩니다.
          # Amazon Linux 2023 등 최신 AMI는 기본 지원합니다.
          working-directory: /home/${{ secrets.SSH_USERNAME }}
          # [테스트] 가장 단순한 명령어를 보내서 SSM 연결 자체에 문제가 없는지 확인합니다.
          command: ls -al