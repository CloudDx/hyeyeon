version: '3.8'

services:
  # 1. Nginx 리버스 프록시 서비스 정의
  nginx:
    image: nginx:alpine
    container_name: my-nginx
    ports:
      # .env 파일에 정의된 WEB_PORT(80)와 443(HTTPS) 포트를 연결합니다.
      - "${WEB_PORT}:80"
      - "443:443"
    volumes:
      # 로컬의 nginx 디렉터리를 컨테이너의 설정 디렉터리에 마운트합니다.
      - ./nginx:/etc/nginx/conf.d
      # Certbot과 공유할 볼륨을 마운트합니다.
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
    depends_on:
      - api

  # 2. API 서버 서비스 정의
  api:
    # Docker Hub에서 내려받은 이미지를 사용합니다.
    image: gpdus4605/onpremise-webservice:latest
    # 컨테이너의 이름을 'my-api'로 지정합니다.
    container_name: my-api
    # 외부와 직접 통신하지 않으므로 ports 섹션을 제거하고, 대신 expose로 내부 포트를 명시합니다.
    expose:
      - "5000"
    # 아래 정의된 'db' 서비스가 먼저 시작된 후에 'api' 서비스를 시작합니다.
    depends_on:
      - db
    # 환경 변수를 주입합니다.
    environment:
      # .env 파일에서 설정값을 가져와 환경 변수로 주입합니다.
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      # Flask 앱이 '운영(production)' 모드로 실행되도록 설정합니다.
      - FLASK_ENV=prod
      # Flask CLI가 애플리케이션을 찾을 수 있도록 경로를 지정합니다.
      - FLASK_APP=run.py

  # 3. PostgreSQL 데이터베이스 서비스 정의
  db:
    # Docker Hub에 있는 공식 PostgreSQL 14 이미지를 사용합니다.
    image: postgres:14-alpine
    container_name: my-postgres-db
    # .env 파일의 값을 참조하여 환경 변수를 설정합니다.
    env_file:
      - .env
    # .env 파일에 정의된 DB_PORT(5433)를 컨테이너의 5432 포트로 연결합니다.
    ports:
      - "${DB_PORT}:5432"
    # 데이터베이스 데이터를 영속적으로 저장하기 위해 볼륨을 연결합니다.
    # 'postgres-data'라는 이름의 볼륨을 컨테이너의 '/var/lib/postgresql/data' 경로에 마운트합니다.
    volumes:
      - postgres-data:/var/lib/postgresql/data

# 4. Docker 볼륨 정의
volumes:
  postgres-data:
  # Certbot을 위한 볼륨을 정의합니다.
  certbot-etc:
  certbot-var:

  # 4. Certbot 서비스 정의 (인증서 발급 및 갱신용)
  certbot:
    image: certbot/certbot
    container_name: my-certbot
    # entrypoint를 오버라이드하여 컨테이너가 바로 종료되지 않게 합니다.
    # 12시간마다 sleep을 반복하여 컨테이너를 유지시킵니다. (갱신 주기와는 무관)
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 12h & wait $${!}; done;'"
    volumes:
      # Nginx와 동일한 볼륨을 마운트하여 인증서를 공유합니다.
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt