3. GitHub Actions를 이용한 CI/CD 구축 To-Do List
현재 프로젝트를 기준으로, GitHub Actions를 사용하여 CI/CD 파이프라인을 구축하는 단계를 To-Do List 형식으로 정리해 드릴게요.

✅ 1단계: GitHub Repository 준비
[ ] GitHub에 새로운 Repository를 생성합니다.
[ ] 현재 로컬 프로젝트(onpremise-webservice)를 해당 Repository에 푸시합니다. (.env 파일은 보안을 위해 .gitignore에 추가하여 제외해야 합니다.)
✅ 2단계: GitHub Actions에 민감 정보 등록 (Secrets)
운영 서버 접속 정보나 Docker Hub 계정 정보 등은 코드에 노출되면 안 됩니다. GitHub의 Secrets 기능을 사용해 안전하게 저장합니다.

[ ] GitHub Repository의 Settings > Secrets and variables > Actions 메뉴로 이동합니다.
[ ] 아래 정보들을 New repository secret 버튼을 눌러 등록합니다.
DOCKER_USERNAME: Docker Hub 아이디
DOCKER_PASSWORD: Docker Hub 비밀번호 (또는 Access Token)
SSH_HOST: 운영 서버의 공인 IP 주소
SSH_USERNAME: 운영 서버 접속 계정 (예: ubuntu)
SSH_PRIVATE_KEY: 운영 서버 접속에 사용하는 Private Key (파일 내용을 복사해서 붙여넣기)
ENV_FILE_CONTENT: 로컬의 .env 파일 내용을 그대로 복사해서 붙여넣기
✅ 3. 단계: CI/CD 워크플로우 파일 작성
프로젝트 루트에 .github/workflows/ 디렉터리를 만들고, 그 안에 main.yml 같은 이름으로 워크플로우 파일을 작성합니다. 이 파일이 CI/CD의 모든 자동화 단계를 정의합니다.

[ ] CI (빌드 및 푸시) 단계 정의:

main 브랜치에 코드가 푸시될 때 워크플로우가 시작되도록 설정합니다.
Docker Hub에 로그인하는 단계를 추가합니다.
프로젝트의 Dockerfile을 사용하여 Docker 이미지를 빌드합니다. (이때 이미지 태그는 고유하게 만드는 것이 좋습니다. 예: gpdus4605/onpremise-webservice:${{ github.sha }})
빌드된 이미지를 Docker Hub에 푸시합니다.
[ ] CD (서버 배포) 단계 정의:

CI 단계가 성공하면 CD 단계가 실행되도록 설정합니다.
SSH를 통해 운영 서버에 접속하는 단계를 추가합니다.
서버에서 다음 명령어들을 순서대로 실행하도록 스크립트를 작성합니다.
최신 Docker 이미지를 docker pull로 내려받습니다.
GitHub Secret에 저장해 둔 .env 파일 내용을 서버에 생성합니다.
docker-compose down으로 기존 컨테이너를 내립니다.
docker-compose up -d로 새 컨테이너를 실행합니다.
docker-compose exec api flask db upgrade로 DB 마이그레이션을 실행합니다.
이러한 파이프라인을 구축해두면, 앞으로는 로컬에서 코드를 수정하고 git push만 하면 몇 분 안에 자동으로 서버에 모든 변경사항이 반영되는 편리함을 경험하실 수 있습니다.