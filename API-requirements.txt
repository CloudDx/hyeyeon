 ## **미니 게시판 API 서버 개발 요구사항 명세서 (Final Version)**

  - **프로젝트명**: 미니 게시판 API 서버 (Flask/K8s)
  - **버전**: 1.0
  - **작성일**: 2025-09-15

### **1. 프로젝트 개요 📜**

본 프로젝트는 Python의 **Flask** 프레임워크와 **PostgreSQL** 데이터베이스를 사용하여 사용자 인증 및 게시글 CRUD(생성, 조회, 수정, 삭제) 기능을 제공하는 RESTful API 서버를 개발하는 것을 목표로 한다. 완성된 애플리케이션은 **Docker**로 컨테이너 이미지를 생성하고, **Kubernetes**를 통해 온프레미스 환경에 배포 및 운영하는 것을 전제로 한다.

  - **백엔드**: Python (Flask)
  - **데이터베이스**: PostgreSQL
  - **컨테이너화**: Docker
  - **컨테이너 오케스트레이션**: Kubernetes

-----

### **2. 시스템 아키텍처 (Kubernetes 환경) 🚢**

Kubernetes 클러스터 내에서 **Deployment**(Flask API 서버), **StatefulSet**(PostgreSQL DB), **Service**(네트워크 연결), **Secret**(민감 정보) 등의 리소스를 활용하여 시스템을 구성한다. 클라이언트의 요청은 Service를 통해 Flask API Pod으로 전달되며, API 서버는 PostgreSQL Pod과 통신하여 데이터를 처리한다.

-----

### **3. 기능 요구사항 (상세 API 명세) 📋**

#### **3.1. 사용자 관리 (User)**

##### **3.1.1. 회원가입**

  - **설명**: 새로운 사용자의 정보를 받아 계정을 생성한다.
  - **Endpoint**: `POST /api/users/signup`
  - **인증**: 필요 없음
  - **요청 (Request)**:
      - `Content-Type: application/json`
      - **Body**:
        ```json
        {
          "email": "user@example.com",
          "username": "nickname123",
          "password": "password123!"
        }
        ```
      - **유효성 검사**:
          - `email`: 유효한 이메일 형식이어야 함 (필수)
          - `username`: 3자 이상 (필수)
          - `password`: 8자 이상, 영문/숫자/특수문자 조합 권장 (필수)
  - **응답 (Response)**:
      - **✅ 성공 (201 Created)**:
        ```json
        {
          "userId": 1,
          "email": "user@example.com",
          "username": "nickname123"
        }
        ```
      - **❌ 실패 (400 Bad Request)**: 요청 Body의 형식이 잘못되었거나 유효성 검사를 통과하지 못했을 경우.
        ```json
        { "message": "유효하지 않은 요청입니다. (예: 비밀번호는 8자 이상이어야 합니다.)" }
        ```
      - **❌ 실패 (409 Conflict)**: 이메일 또는 닉네임이 이미 존재할 경우.
        ```json
        { "message": "이미 사용중인 이메일 또는 닉네임입니다." }
        ```

##### **3.1.2. 로그인**

  - **설명**: 사용자를 인증하고, API 접근 권한을 증명하는 **JWT Access Token**을 발급한다.
  - **Endpoint**: `POST /api/users/login`
  - **인증**: 필요 없음
  - **요청 (Request)**:
      - `Content-Type: application/json`
      - **Body**:
        ```json
        {
          "email": "user@example.com",
          "password": "password123!"
        }
        ```
  - **응답 (Response)**:
      - **✅ 성공 (200 OK)**:
        ```json
        {
          "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
        ```
      - **❌ 실패 (401 Unauthorized)**: 이메일이 존재하지 않거나 비밀번호가 틀렸을 경우.
        ```json
        { "message": "이메일 또는 비밀번호가 올바르지 않습니다." }
        ```

#### **3.2. 게시글 관리 (Post)**

##### **3.2.1. 글 작성**

  - **설명**: 새로운 게시글을 작성하고 데이터베이스에 저장한다.
  - **Endpoint**: `POST /api/posts`
  - **인증**: **필수**
  - **요청 (Request)**:
      - `Content-Type: application/json`
      - `Authorization: Bearer <accessToken>`
      - **Body**:
        ```json
        {
          "title": "새로운 게시글 제목입니다.",
          "content": "여기는 게시글 내용입니다."
        }
        ```
      - **유효성 검사**: `title`, `content`는 비어있을 수 없음 (필수)
  - **응답 (Response)**:
      - **✅ 성공 (201 Created)**: 새로 생성된 게시글의 상세 정보를 반환한다.
        ```json
        {
          "postId": 101,
          "title": "새로운 게시글 제목입니다.",
          "content": "여기는 게시글 내용입니다.",
          "author": "nickname123",
          "createdAt": "2025-09-15T12:00:00Z"
        }
        ```
      - **❌ 실패 (401 Unauthorized)**: 유효한 Access Token이 없을 경우.
        ```json
        { "message": "인증이 필요합니다." }
        ```

##### **3.2.2. 글 목록 조회**

  - **설명**: 모든 게시글 목록을 최신순으로 조회한다.
  - **Endpoint**: `GET /api/posts`
  - **인증**: 필요 없음
  - **요청 (Request)**: 없음
  - **응답 (Response)**:
      - **✅ 성공 (200 OK)**: 게시글 정보가 담긴 배열을 반환한다. (게시글이 없으면 빈 배열 `[]` 반환)
        ```json
        [
          {
            "postId": 102,
            "title": "두 번째 글",
            "author": "anotherUser",
            "createdAt": "2025-09-15T13:00:00Z"
          },
          {
            "postId": 101,
            "title": "새로운 게시글 제목입니다.",
            "author": "nickname123",
            "createdAt": "2025-09-15T12:00:00Z"
          }
        ]
        ```

##### **3.2.3. 특정 게시글 상세 조회**

  - **설명**: ID로 특정 게시글 하나의 상세 내용을 조회한다.
  - **Endpoint**: `GET /api/posts/{postId}`
  - **인증**: 필요 없음
  - **요청 (Request)**:
      - Path Parameter: `postId` (게시글의 고유 ID)
  - **응답 (Response)**:
      - **✅ 성공 (200 OK)**:
        ```json
        {
          "postId": 101,
          "title": "새로운 게시글 제목입니다.",
          "content": "여기는 게시글 내용입니다.",
          "author": "nickname123",
          "createdAt": "2025-09-15T12:00:00Z",
          "updatedAt": "2025-09-15T12:05:00Z"
        }
        ```
      - **❌ 실패 (404 Not Found)**: 해당 ID의 게시글이 존재하지 않을 경우.
        ```json
        { "message": "게시글을 찾을 수 없습니다." }
        ```

##### **3.2.4. 글 수정**

  - **설명**: 특정 게시글의 제목이나 내용을 수정한다. **본인이 작성한 글만** 수정할 수 있다.
  - **Endpoint**: `PUT /api/posts/{postId}`
  - **인증**: **필수**
  - **요청 (Request)**:
      - `Content-Type: application/json`
      - `Authorization: Bearer <accessToken>`
      - Path Parameter: `postId`
      - **Body**:
        ```json
        {
          "title": "수정된 게시글 제목",
          "content": "수정된 게시글 내용입니다."
        }
        ```
  - **응답 (Response)**:
      - **✅ 성공 (200 OK)**: 수정이 완료된 게시글 정보를 반환한다.
      - **❌ 실패 (401 Unauthorized)**: 유효한 Access Token이 없을 경우.
      - **❌ 실패 (403 Forbidden)**: 게시글 작성자가 아닌 다른 사용자가 수정을 시도할 경우.
        ```json
        { "message": "게시글을 수정할 권한이 없습니다." }
        ```
      - **❌ 실패 (404 Not Found)**: 해당 ID의 게시글이 없을 경우.

##### **3.2.5. 글 삭제**

  - **설명**: 특정 게시글을 삭제한다. **본인이 작성한 글만** 삭제할 수 있다.
  - **Endpoint**: `DELETE /api/posts/{postId}`
  - **인증**: **필수**
  - **요청 (Request)**:
      - `Authorization: Bearer <accessToken>`
      - Path Parameter: `postId`
  - **응답 (Response)**:
      - **✅ 성공 (204 No Content)**: 응답 Body 없이 성공 상태 코드만 반환한다.
      - **❌ 실패 (401 Unauthorized)**: 유효한 Access Token이 없을 경우.
      - **❌ 실패 (403 Forbidden)**: 게시글 작성자가 아닌 다른 사용자가 삭제를 시도할 경우.
      - **❌ 실패 (404 Not Found)**: 해당 ID의 게시글이 없을 경우.

-----

### **4. 데이터베이스 모델 (Schema) 💾**

  - **Users 테이블**

      - `id` (PK, SERIAL)
      - `email` (VARCHAR(255), UNIQUE, NOT NULL)
      - `username` (VARCHAR(50), UNIQUE, NOT NULL)
      - `password` (VARCHAR(255), NOT NULL)
      - `created_at` (TIMESTAMP, DEFAULT now())

  - **Posts 테이블**

      - `id` (PK, SERIAL)
      - `title` (VARCHAR(255), NOT NULL)
      - `content` (TEXT, NOT NULL)
      - `user_id` (INTEGER, FK to Users.id, NOT NULL)
      - `created_at` (TIMESTAMP, DEFAULT now())
      - `updated_at` (TIMESTAMP, DEFAULT now())

-----

### **5. 비기능 요구사항 ⚙️**

  - **보안**:
      - 비밀번호는 반드시 \*\*단방향 암호화(해싱)\*\*하여 저장한다. (예: `werkzeug.security` 사용)
      - 사용자 인증은 **JWT(JSON Web Token)** 방식을 사용한다.
  - **컨테이너화**:
      - Flask 애플리케이션 실행을 위한 \*\*`Dockerfile`\*\*을 작성한다.
      - 의존성 관리를 위해 `requirements.txt` 파일을 사용한다.
  - **배포**:
      - **Kubernetes**를 통한 배포를 최종 목표로 하며, 이를 위한 `deployment.yaml`, `service.yaml` 등 **manifest 파일**을 작성한다.
      - DB 연결 정보, JWT 시크릿 키 등은 코드에 하드코딩하지 않고 Kubernetes **Secret** 또는 **ConfigMap**을 통해 환경 변수로 주입한다.

-----

### **6. 추천 개발 순서 (로드맵) 🗺️**

1.  **로컬 환경 설정**: Python, Flask, PostgreSQL 설치.
2.  **데이터베이스 모델링**: 위 스키마대로 테이블 생성 및 ORM(예: SQLAlchemy) 설정.
3.  **API 기능 개발**: 명세서에 따라 각 API Endpoint를 순서대로 구현하고 Postman으로 단위 테스트 진행.
4.  **인증 로직 구현**: JWT 발급 및 토큰 검증 미들웨어(Decorator) 구현.
5.  **Dockerfile 작성**: 애플리케이션을 Docker 이미지로 빌드.
6.  **Kubernetes Manifest 작성**: `Secret`, `StatefulSet`, `Deployment`, `Service` YAML 파일 작성.
7.  **Kubernetes 배포**: 온프레미스 클러스터에 `kubectl apply` 명령어로 배포 후 최종 테스트.